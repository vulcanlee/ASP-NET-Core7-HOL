@page "/"
@using Microsoft.AspNetCore.SignalR.Client

<PageTitle>Hello SignalR</PageTitle>

<div class="text-primary h2">@receiveMessage</div>
<div><InputText @bind-Value="sendMessage" /></div>
<div><button @onclick="SendAsync">送出</button></div>

@code {
    HubConnection connection;
    string receiveMessage = string.Empty;
    string sendMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        #region 建立與產生 SignalR Client 端的物件
        connection = new HubConnectionBuilder()
           .WithUrl("http://localhost:5092/myChatHub")
           .Build();
        #endregion

        BindingEvent();
        await StartSignalRConnectionAsync();
    }

    async Task SendAsync()
    {
        await SendMessageToServerAsync();
    }

    private async Task SendMessageToServerAsync()
    {
        #region 開始對 SignalR 伺服器送出訊息
        try
        {
            await connection.InvokeAsync("SendMessage",
                "Vulcan", sendMessage);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        #endregion

        for (int i = 0; i < 10; i++)
        {
            await Task.Delay(500);
        }
    }

    private async Task StartSignalRConnectionAsync()
    {
        #region 啟動與後端 SignalR 伺服器進行連線
        Console.WriteLine("Connection started");
        await connection.StartAsync();
        try
        {
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        #endregion
    }

    private void BindingEvent()
    {
        #region 綁定相關事件
        #region 網路發生異常，導致與後端 SignalR 伺服器連線中斷時機，將會觸發此事件
        connection.Closed += async (error) =>
        {
            await Task.Delay(new Random().Next(0, 5) * 1000);
            try
            {
                await connection.StartAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        };
        #endregion

        #region 綁定有特定訊息要被發送出來的時機，將會觸發此事件
        connection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var newMessage = $"來自伺服器的訊息> {user}: {message}";
            if (string.IsNullOrEmpty(receiveMessage))
            {
                receiveMessage = newMessage;
            }
            else
            {
                receiveMessage += $"{Environment.NewLine}{newMessage}";
            }
            Console.WriteLine(newMessage);
            sendMessage = "";
        });
        #endregion
        #endregion
    }
}
